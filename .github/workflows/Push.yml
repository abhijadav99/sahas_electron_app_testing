name: Push Updated Code

on: push
        
jobs:

  push_code:
    permissions: write-all
    runs-on: windows-latest
    
    env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

    steps:

    - uses: actions/checkout@v2
      name: Checkout repository

    - name: Check for Existing Release
      id: check_release
      run: |
          RESPONSE=$(curl -s -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/v1.4.0")
          if [ "$?" -eq "0" ]; then
            RELEASE_ID=$(echo $RESPONSE | jq -r '.id')
            echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_ENV
          fi
    - name: Create or Update Release
      id: create_or_update_release
      run: |
          RELEASE_TAG=$(date +'%Y%m%d%H%M%S')
          echo "Creating or updating release with tag $RELEASE_TAG"
          if [ -z "${RELEASE_ID}" ]; then
            # Create a new release
            RESPONSE=$(curl -s -X POST \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases" \
              -d '{
                "tag_name": "'$RELEASE_TAG'",
                "name": "Release $RELEASE_TAG",
                "draft": true,
                "prerelease": false
              }')
          else
            # Update an existing release
            RESPONSE=$(curl -s -X PATCH \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/${RELEASE_ID}" \
              -d '{
                "tag_name": "'$RELEASE_TAG'",
                "name": "Release $RELEASE_TAG"
              }') 
          fi
          RELEASE_ID=$(echo $RESPONSE | jq -r '.id')
          echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_ENV

    - name: Delete Existing Release Assets
      if: steps.check_release.outputs.RELEASE_ID
      run: |
          curl -X DELETE \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/${RELEASE_ID}/assets"

    - name: Upload Release Assets
      run: |
          RELEASE_ID=${{ env.RELEASE_ID }}
          for file in release_assets/*; do
            echo "Uploading $file to release $RELEASE_ID"
            curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary "@$file" \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/${RELEASE_ID}/assets?name=$(basename $file)"
          done

    - run: npm run deploy
      name: Build Electron app
